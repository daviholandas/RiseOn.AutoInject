using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Microsoft.CodeAnalysis;
using RiseOn.AutoInject.Extensions;

namespace RiseOn.AutoInject
{
    public static class SourceGeneratorHelper
    {
        private const string Header = @"
          //------------------------------------------------------------------------------
          // <auto-generated>
          //     This code was generated by the RiseOn.AutoInject source generator
          //
          //     Changes to this file may cause incorrect behavior and will be lost if
          //     the code is regenerated.
          // </auto-generated>
          //------------------------------------------------------------------------------
        ";


        public static ServiceInfo GetServiceInfo(GeneratorAttributeSyntaxContext context)
        {
            var symbol = (INamedTypeSymbol)context.TargetSymbol;

            var arguments = context.Attributes[0].NamedArguments
                .ToDictionary(x => x.Key, x => x.Value.Value);

            var name = symbol.ToDisplayString();

            var interfaceName = symbol.Interfaces.Length > 0 ? symbol.Interfaces[0].ToDisplayString() : null;
            var baseType = symbol.BaseType;
            var baseName = baseType != null &&
                           baseType.SpecialType != SpecialType.System_Object ?
                baseType.ToDisplayString() :
                null;

            return new()
            {
                ServiceLifetime = ((int?)context.Attributes[0].ConstructorArguments[0].Value switch
                {
                    0 => "Singleton",
                    1 => "Scoped",
                    2 => "Transient",
                    _ => throw new InvalidOperationException("Invalid service lifetime value!")
                }),
                Namespace = arguments.GetValueOrDefault("ServicesNameSpace")?.ToString(),
                ServiceName = symbol.ToDisplayString(),
                CollectionName = (string?)arguments.GetValueOrDefault("CollectionName") ??
                                 $"{symbol.ContainingNamespace.ToDisplayString().Replace(".", "")}Services",
                ImplementationName = GetImplementationName(symbol, (string?)arguments.GetValueOrDefault("ImplementationOf")),
                Key = arguments.GetValueOrDefault("Key")
            };
        }

        private static string? GetImplementationName(INamedTypeSymbol symbol,
            string? implementationOf)
        {
            if (!string.IsNullOrEmpty(implementationOf))
                return implementationOf;

            return symbol.Interfaces.Length > 0
                ? symbol.Interfaces[0].ToDisplayString()
                : symbol.BaseType?.SpecialType != SpecialType.System_Object
                    ? symbol.BaseType?.ToDisplayString()
                    : null;
        }

        // TODO: Fix the align header in the source generated code.
        public static string GenerateSourceClass(IEnumerable<ServiceInfo> serviceInfos)
        {
            var services = serviceInfos.ToList();
            var first = services.First();
            
            var sb = new StringBuilder(Header)
                .AppendLine("using Microsoft.Extensions.DependencyInjection;\n");

            if (!string.IsNullOrEmpty(first.Namespace))
                sb.AppendLine($"namespace {first.Namespace};\n");

            sb.AppendLine($"public static class {first.CollectionName}CollectionExtensions")
                .AppendLine("{")
                .AppendLine($"    public static IServiceCollection Use{first.CollectionName}(this IServiceCollection services)")
                .AppendLine("    {");

            foreach (var service in services)
            {
                var registrationLine = GenerateServiceRegistration(service);
                sb.AppendLine($"        {registrationLine}");
            }

            sb.AppendLine("        return services;")
                .AppendLine("    }")
                .AppendLine("}");

            return sb.ToString();
        }

        private static string GenerateServiceRegistration(ServiceInfo service)
        {
            var method = service.Key != null ? "AddKeyed" : "Add";
            var types = service.ImplementationName is null 
                ? $"<{service.ServiceName}>"
                : $"<{service.ImplementationName}, {service.ServiceName}>";
            var key = service.Key != null ? $", \"{service.Key}\"" : string.Empty;
            
            return $"services.{method}{service.ServiceLifetime}{types}({key.TrimStart(',')});";
        }
    }
}