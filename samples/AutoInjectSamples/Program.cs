using Microsoft.Extensions.DependencyInjection;
using RiseOn.AutoInject;

// Register the services using AutoInject
var services = new ServiceCollection();

// This extension method is generated by the source generator with the same name as the collection
services.UseSampleServices();


public interface IMyService {}


[InjectService(ServiceLifetimeType.Singleton,
    CollectionName = "SampleServices")]
public class MySingletonService : IMyService
{
}

[InjectService(ServiceLifetimeType.Scoped,
    CollectionName = "SampleServices")]
public class MyScopedService : IMyService
{
}

[InjectService(ServiceLifetimeType.Transient,
    CollectionName = "SampleServices")]
public class MyTransientService : IMyService
{
}

// This service will register int the container without any implementation, because of the `InjectAlone` parameter
// services.AddSingleton<AloneService>();
// If not use the `InjectAlone` parameter, the service will be registered with the IDisposable interface
// services.AddSingleton<System.IDisposable, AloneService>();
[InjectService(ServiceLifetimeType.Singleton,
    true,
    CollectionName = "SampleServices")]
public class AloneService : IDisposable
{
    public void Dispose()
    {
        // TODO release managed resources here
    }
}